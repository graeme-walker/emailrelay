#!/bin/sh
# 
# Copyright (C) 2001 Graeme Walker <graeme_walker@users.sourceforge.net>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
# 
# ===
#
# emailrelay-test.sh
#
# Tests the E-MailRelay system.
#
# Creates four temporary spool directories under /tmp and runs
# four emailrelay servers to bucket-brigade a test message from one to 
# the next. The test succeeds if the message gets into the final 
# spool directory.
#
# Once all the servers have been killed the separate log files are 
# concatenated into the summary log file "/tmp/emailrelay-test.out".
#
# If this test takes more than a second or two then it has failed.
#

# configuration
#
exe_dir="../src/main"
if test "${1}" != "" ; then exe_dir="${1}" ; fi
exe="${exe_dir}/emailrelay"
poke="${exe_dir}/emailrelay-poke"
null_filter="/bin/touch"
content_file="/etc/services"
pp="1001" # port-prefix

# configuration fallback
#
if test \! -f ${null_filter} 
then 
	null_filter="/usr/bin/touch"
fi

# initialisation
#
base_dir="/tmp/`basename $0`.$$.tmp"
summary_log="/tmp/`basename $0`.out"
exit_code="1"

Cleanup()
{
	kill `cat ${base_dir}/pid-* 2>/dev/null` 2>/dev/null
	if test -d ${base_dir}
	then
		grep "MailRelay-Reason" ${base_dir}/*/*envelope*bad > "${summary_log}" 2>/dev/null
		grep "." ${base_dir}/log-? >> "${summary_log}" 2>/dev/null
		ls -lR ${base_dir} >> "${summary_log}" 2>/dev/null
		diff -w ${base_dir}/store-4/*content "${content_file}" >> "${summary_log}" 2>/dev/null
	fi
}

Trap() 
{ 
	Cleanup
	exit ${exit_code}
}

RunServer()
{
	port_="${1}"
	spool_="${2}"
	log_="${3}"
	pidfile_="${4}"
	extra_="${5}"

	mkdir -p ${base_dir}/${spool_}
	${exe} --log --no-syslog --port ${port_} --spool-dir ${base_dir}/${spool_} \
		--pid-file ${base_dir}/${pidfile_} ${extra_} 2> ${base_dir}/${log_}
}

RunClient()
{
	to_="${1}"
	spool_="${2}"
	log_="${3}"
	pidfile_="${4}"

	${exe} --forward --no-daemon --dont-serve --log --no-syslog \
		--pid-file ${base_dir}/${pidfile_} \
		--forward-to ${to_} --spool-dir ${base_dir}/${spool_} 2> ${base_dir}/${log_}
}

RunPoke()
{
	port_="${1}"
	log_="${2}"

	${poke} ${port_} > ${base_dir}/${log_}
}

Content()
{
	echo "To: recipient-1@localhost, recipient-2@localhost"
	echo "Subject: test message 1"
	echo "From: sender"
	echo " "
	cat "${content_file}"
}

Envelope()
{
	echo "X-MailRelay-Format: #2821.3"
	echo "X-MailRelay-Content: 8bit"
	echo "X-MailRelay-From: sender"
	echo "X-MailRelay-ToCount: 2"
	echo "X-MailRelay-To-Remote: recipient-1@localhost"
	echo "X-MailRelay-To-Remote: recipient-2@localhost"
	echo "X-MailRelay-Authentication: "
	echo "X-MailRelay-Client: 127.0.0.1"
	echo "X-MailRelay-End: 1"
}

CrLf()
{
	sed 's/$/£/' | tr '£' '\r'
}

CheckResults()
{
	if test -f ${base_dir}/store-4/*.envelope -a -f ${base_dir}/store-4/*.content
	then
		exit_code="0"
		echo `basename $0`: succeeded
	else
		echo `basename $0`: failed: see ${summary_log} >&2
	fi
}

StartTimer()
{
	( sleep 30 ; Cleanup ) &
}

CreateMessages()
{
	mkdir -p ${base_dir}/store-1
	Content | CrLf > ${base_dir}/store-1/emailrelay.0.1.content
	Envelope | CrLf > ${base_dir}/store-1/emailrelay.0.1.envelope
}

CreateAuth()
{
	mkdir -p "${base_dir}"

	file="${base_dir}/server.auth"
	echo "# server.auth" > ${file}
	echo "login server fred freds_password" >> ${file}
	echo "login server joe joe+00s_password" >> ${file}
	echo "login client dummy pwd" >> ${file}
	echo "cram-md5 client dummy digest" >> ${file}

	file="${base_dir}/client.auth"
	echo "# client.auth" > ${file}
	echo "cram-md5 client foo bar" >> ${file}
	echo "login client joe joe+00s_password" >> ${file}
	echo "login server abc def" >> ${file}
}

trap "Trap ; exit" 1 2 3 13 15
trap "Trap 0 ; exit" 0

StartTimer
CreateAuth
RunServer ${pp}1 store-2 log-1 pid-1
RunServer ${pp}2 store-2 log-2 pid-2 "--admin ${pp}9 --forward-to localhost:${pp}3"
RunServer ${pp}3 store-3 log-3 pid-3 "--immediate --forward-to localhost:${pp}4 --filter ${null_filter} --client-auth ${base_dir}/client.auth"
RunServer ${pp}4 store-4 log-4 pid-4 "--server-auth ${base_dir}/server.auth"
CreateMessages
RunClient localhost:${pp}1 store-1 log-c pid-5
RunPoke ${pp}9 log-p
CheckResults

