#!/bin/sh
# 
# Copyright (C) 2001 Graeme Walker <graeme_walker@users.sourceforge.net>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
# 
# ===
#
# emailrelay-soak.sh
#
# Soak tests the E-MailRelay system.
#

# configuration
#
exe="../src/main/emailrelay"
pp="1001" # port prefix
null_filter="/bin/touch"
as_client="--no-syslog --no-daemon --dont-serve --forward --forward-to" # no --log
as_server="--log" # no --close-stderr
as_proxy="--log --immediate --forward-to" # no --close-stderr
content="/etc/passwd"

# configuration fallback
#
if test \! -f "${exe}"
then
	exe="../emailrelay"
fi
if test \! -f "${null_filter}"
then
	null_filter="/usr/bin/touch"
fi

# initialisation
#
base_dir="/tmp/`basename $0`.$$.tmp"
mkdir "${base_dir}"
trap "rm -rf ${base_dir} 2>/dev/null ; killall emailrelay ; exit" 0 1 2 3 13 15

Content()
{
	echo "To:" ${USER}@localhost
	echo "Subject: test message from process" $$
	echo "From: tester"
	echo ""
	for i in 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
	do
		cat "${content}"
	done
}

Envelope()
{
	echo "X-MailRelay-Format: #2821.2"
	echo "X-MailRelay-Content: 8bit"
	echo "X-MailRelay-From: me"
	echo "X-MailRelay-ToCount: 1"
	echo "X-MailRelay-To-Remote:" ${USER}@localhost
	echo "X-MailRelay-End: 1"
}

CrLf()
{
	sed 's/$/£/' | tr '£' '\r'
}

CreateMessage()
{
	spool_dir="${1}"

	Content | CrLf > ${spool_dir}/emailrelay.$$.1.content
	Envelope | CrLf > ${spool_dir}/emailrelay.$$.1.envelope
}

RunClient()
{
	to_address="${1}"
	spool_dir="${2}"

	${exe} ${as_client} ${to_address} --spool-dir ${spool_dir}
}

Send()
{
	to_address="${1}"

	dir="${base_dir}/spool-send"
	mkdir -p "${dir}"

	CreateMessage "${dir}"
	RunClient "${to_address}" "${dir}"
}

RunServer()
{
	port="${1}"
	spool_dir="${2}"
	log="${3}"
	pid_file="${4}"

	if test "`echo ${pid_file} | grep '^/'`" = ""
	then
		pid_file="`pwd`/${pid_file}"
	fi

	mkdir -p "${spool_dir}"
	${exe} ${as_server} --port ${port} --spool-dir ${spool_dir} \
		--pid-file ${pid_file} \
		--admin `expr ${port} + 100` --forward-to localhost:smtp --no-syslog 2> "${log}"
}

RunProxy()
{
	port="${1}"
	to_address="${2}"
	spool_dir="${3}"
	log="${4}"
	pid_file="${5}"

	if test "`echo ${pid_file} | grep '^/'`" = ""
	then
		pid_file="`pwd`/${pid_file}"
	fi

	mkdir -p "${spool_dir}"
	${exe} ${as_proxy} ${to_address} --port ${port} --spool-dir ${spool_dir} \
		--pid-file ${pid_file} \
		--admin `expr ${port} + 100` --no-syslog 2> "${log}"
}

killall emailrelay

RunServer ${pp}3 ${base_dir}/spool-3 server-2.out server-2.pid
RunProxy ${pp}1 localhost:${pp}3 ${base_dir}/spool-1 proxy.out proxy.pid
RunServer ${pp}2 ${base_dir}/spool-2 server-1.out server-1.pid

sleep 1 # to allow pid files time to be written
echo ps -l -p `cat server-2.pid` -p `cat server-1.pid` -p `cat proxy.pid`
ps -l -p `cat server-2.pid` -p `cat server-1.pid` -p `cat proxy.pid`

while true
do
	Send localhost:${pp}1
	Send localhost:${pp}2
	echo -n .
done

